--- dlls/ntdll/signal_x86_64.c
+++ dlls/ntdll/signal_x86_64.c
@@ -654,12 +654,7 @@ __ASM_GLOBAL_FUNC( KiUserApcDispatcher,
                    "int3")
 
 
-/*******************************************************************
- *		KiUserCallbackDispatcher (NTDLL.@)
- *
- * FIXME: not binary compatible
- */
-void WINAPI KiUserCallbackDispatcher( ULONG id, void *args, ULONG len )
+void WINAPI user_callback_dispatcher( ULONG id, void *args, ULONG len )
 {
     NTSTATUS status;
 
@@ -678,6 +673,27 @@ void WINAPI KiUserCallbackDispatcher( ULONG id, void *args, ULONG len )
     RtlRaiseStatus( status );
 }
 
+/*******************************************************************
+ *		KiUserCallbackDispatcher (NTDLL.@)
+ *
+ * FIXME: not binary compatible
+ */
+#ifdef __x86_64__
+__ASM_GLOBAL_FUNC( KiUserCallbackDispatcher,
+                  "movq %rsp,%rbp\n\t"
+                  __ASM_SEH(".seh_setframe %rbp, 0\n\t")
+                  __ASM_CFI(".cfi_def_cfa rbp, 8\n\t")
+                  "andq $0xFFFFFFFFFFFFFFF0, %rsp\n\t"
+                  __ASM_SEH(".seh_endprologue\n\t")
+                  "call " __ASM_NAME("user_callback_dispatcher") "\n\t"
+                  "int3")
+#else
+void WINAPI DECLSPEC_HOTPATCH KiUserCallbackDispatcher( ULONG id, void *args, ULONG len )
+{
+    return user_callback_dispatcher( id, args, len );
+}
+#endif
+
 
 static ULONG64 get_int_reg( CONTEXT *context, int reg )
 {
--- dlls/ntdll/signal_x86_64.c
+++ dlls/ntdll/signal_x86_64.c
@@ -680,6 +680,7 @@ void WINAPI user_callback_dispatcher( ULONG id, void *args, ULONG len )
  */
 #ifdef __x86_64__
 __ASM_GLOBAL_FUNC( KiUserCallbackDispatcher,
+                  ".byte 0x0f, 0x1f, 0x44, 0x00, 0x00\n\t" /* Overwatch 2 replaces the first 5 bytes with a jump */
                   "movq %rsp,%rbp\n\t"
                   __ASM_SEH(".seh_setframe %rbp, 0\n\t")
                   __ASM_CFI(".cfi_def_cfa rbp, 8\n\t")
--- dlls/ntdll/signal_x86_64.c
+++ dlls/ntdll/signal_x86_64.c
@@ -686,6 +686,9 @@ __ASM_GLOBAL_FUNC( KiUserCallbackDispatcher,
                   __ASM_CFI(".cfi_def_cfa rbp, 8\n\t")
                   "andq $0xFFFFFFFFFFFFFFF0, %rsp\n\t"
                   __ASM_SEH(".seh_endprologue\n\t")
+                  "movq 0x28(%rbp), %rdx\n\t"
+                  "movl 0x30(%rbp), %ecx\n\t"
+                  "movl 0x34(%rbp), %r8d\n\t"
                   "call " __ASM_NAME("user_callback_dispatcher") "\n\t"
                   "int3")
 #else
